// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registrationMessage.proto

#include "registrationMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rpc {
PROTOBUF_CONSTEXPR RegistrationRequest::RegistrationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requestedservice_)*/{}
  , /*decltype(_impl_.providedservice_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistrationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistrationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistrationRequestDefaultTypeInternal() {}
  union {
    RegistrationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistrationRequestDefaultTypeInternal _RegistrationRequest_default_instance_;
PROTOBUF_CONSTEXPR RegistrationResponse::RegistrationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegistrationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegistrationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegistrationResponseDefaultTypeInternal() {}
  union {
    RegistrationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegistrationResponseDefaultTypeInternal _RegistrationResponse_default_instance_;
}  // namespace rpc
static ::_pb::Metadata file_level_metadata_registrationMessage_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_registrationMessage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_registrationMessage_2eproto = nullptr;

const uint32_t TableStruct_registrationMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::RegistrationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::RegistrationRequest, _impl_.requestedservice_),
  PROTOBUF_FIELD_OFFSET(::rpc::RegistrationRequest, _impl_.providedservice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::RegistrationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::RegistrationResponse, _impl_.ip_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rpc::RegistrationRequest)},
  { 8, -1, -1, sizeof(::rpc::RegistrationResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::rpc::_RegistrationRequest_default_instance_._instance,
  &::rpc::_RegistrationResponse_default_instance_._instance,
};

const char descriptor_table_protodef_registrationMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031registrationMessage.proto\022\003rpc\032\010Ip.pro"
  "to\"H\n\023RegistrationRequest\022\030\n\020requestedSe"
  "rvice\030\001 \003(\t\022\027\n\017providedService\030\002 \003(\t\"+\n\024"
  "RegistrationResponse\022\023\n\002ip\030\001 \003(\0132\007.rpc.I"
  "pb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_registrationMessage_2eproto_deps[1] = {
  &::descriptor_table_Ip_2eproto,
};
static ::_pbi::once_flag descriptor_table_registrationMessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_registrationMessage_2eproto = {
    false, false, 169, descriptor_table_protodef_registrationMessage_2eproto,
    "registrationMessage.proto",
    &descriptor_table_registrationMessage_2eproto_once, descriptor_table_registrationMessage_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_registrationMessage_2eproto::offsets,
    file_level_metadata_registrationMessage_2eproto, file_level_enum_descriptors_registrationMessage_2eproto,
    file_level_service_descriptors_registrationMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_registrationMessage_2eproto_getter() {
  return &descriptor_table_registrationMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_registrationMessage_2eproto(&descriptor_table_registrationMessage_2eproto);
namespace rpc {

// ===================================================================

class RegistrationRequest::_Internal {
 public:
};

RegistrationRequest::RegistrationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc.RegistrationRequest)
}
RegistrationRequest::RegistrationRequest(const RegistrationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistrationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requestedservice_){from._impl_.requestedservice_}
    , decltype(_impl_.providedservice_){from._impl_.providedservice_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rpc.RegistrationRequest)
}

inline void RegistrationRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requestedservice_){arena}
    , decltype(_impl_.providedservice_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegistrationRequest::~RegistrationRequest() {
  // @@protoc_insertion_point(destructor:rpc.RegistrationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistrationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.requestedservice_.~RepeatedPtrField();
  _impl_.providedservice_.~RepeatedPtrField();
}

void RegistrationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistrationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.RegistrationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requestedservice_.Clear();
  _impl_.providedservice_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistrationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string requestedService = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_requestedservice();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "rpc.RegistrationRequest.requestedService"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string providedService = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_providedservice();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "rpc.RegistrationRequest.providedService"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistrationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.RegistrationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string requestedService = 1;
  for (int i = 0, n = this->_internal_requestedservice_size(); i < n; i++) {
    const auto& s = this->_internal_requestedservice(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.RegistrationRequest.requestedService");
    target = stream->WriteString(1, s, target);
  }

  // repeated string providedService = 2;
  for (int i = 0, n = this->_internal_providedservice_size(); i < n; i++) {
    const auto& s = this->_internal_providedservice(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.RegistrationRequest.providedService");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.RegistrationRequest)
  return target;
}

size_t RegistrationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.RegistrationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string requestedService = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.requestedservice_.size());
  for (int i = 0, n = _impl_.requestedservice_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.requestedservice_.Get(i));
  }

  // repeated string providedService = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.providedservice_.size());
  for (int i = 0, n = _impl_.providedservice_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.providedservice_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistrationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistrationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistrationRequest::GetClassData() const { return &_class_data_; }


void RegistrationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistrationRequest*>(&to_msg);
  auto& from = static_cast<const RegistrationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.RegistrationRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.requestedservice_.MergeFrom(from._impl_.requestedservice_);
  _this->_impl_.providedservice_.MergeFrom(from._impl_.providedservice_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistrationRequest::CopyFrom(const RegistrationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.RegistrationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationRequest::IsInitialized() const {
  return true;
}

void RegistrationRequest::InternalSwap(RegistrationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.requestedservice_.InternalSwap(&other->_impl_.requestedservice_);
  _impl_.providedservice_.InternalSwap(&other->_impl_.providedservice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_registrationMessage_2eproto_getter, &descriptor_table_registrationMessage_2eproto_once,
      file_level_metadata_registrationMessage_2eproto[0]);
}

// ===================================================================

class RegistrationResponse::_Internal {
 public:
};

void RegistrationResponse::clear_ip() {
  _impl_.ip_.Clear();
}
RegistrationResponse::RegistrationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rpc.RegistrationResponse)
}
RegistrationResponse::RegistrationResponse(const RegistrationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegistrationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){from._impl_.ip_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rpc.RegistrationResponse)
}

inline void RegistrationResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegistrationResponse::~RegistrationResponse() {
  // @@protoc_insertion_point(destructor:rpc.RegistrationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegistrationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.~RepeatedPtrField();
}

void RegistrationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegistrationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.RegistrationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegistrationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rpc.Ip ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegistrationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.RegistrationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rpc.Ip ip = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ip_size()); i < n; i++) {
    const auto& repfield = this->_internal_ip(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.RegistrationResponse)
  return target;
}

size_t RegistrationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.RegistrationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rpc.Ip ip = 1;
  total_size += 1UL * this->_internal_ip_size();
  for (const auto& msg : this->_impl_.ip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegistrationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegistrationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegistrationResponse::GetClassData() const { return &_class_data_; }


void RegistrationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegistrationResponse*>(&to_msg);
  auto& from = static_cast<const RegistrationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:rpc.RegistrationResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ip_.MergeFrom(from._impl_.ip_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegistrationResponse::CopyFrom(const RegistrationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.RegistrationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationResponse::IsInitialized() const {
  return true;
}

void RegistrationResponse::InternalSwap(RegistrationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ip_.InternalSwap(&other->_impl_.ip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_registrationMessage_2eproto_getter, &descriptor_table_registrationMessage_2eproto_once,
      file_level_metadata_registrationMessage_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpc::RegistrationRequest*
Arena::CreateMaybeMessage< ::rpc::RegistrationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::RegistrationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::RegistrationResponse*
Arena::CreateMaybeMessage< ::rpc::RegistrationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::RegistrationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
