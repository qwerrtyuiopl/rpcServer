// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: updateNodeServiceArg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_updateNodeServiceArg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_updateNodeServiceArg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Ip.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_updateNodeServiceArg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_updateNodeServiceArg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_updateNodeServiceArg_2eproto;
namespace rpc {
class UpdateNodeServiceArg;
struct UpdateNodeServiceArgDefaultTypeInternal;
extern UpdateNodeServiceArgDefaultTypeInternal _UpdateNodeServiceArg_default_instance_;
}  // namespace rpc
PROTOBUF_NAMESPACE_OPEN
template<> ::rpc::UpdateNodeServiceArg* Arena::CreateMaybeMessage<::rpc::UpdateNodeServiceArg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rpc {

// ===================================================================

class UpdateNodeServiceArg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rpc.UpdateNodeServiceArg) */ {
 public:
  inline UpdateNodeServiceArg() : UpdateNodeServiceArg(nullptr) {}
  ~UpdateNodeServiceArg() override;
  explicit PROTOBUF_CONSTEXPR UpdateNodeServiceArg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNodeServiceArg(const UpdateNodeServiceArg& from);
  UpdateNodeServiceArg(UpdateNodeServiceArg&& from) noexcept
    : UpdateNodeServiceArg() {
    *this = ::std::move(from);
  }

  inline UpdateNodeServiceArg& operator=(const UpdateNodeServiceArg& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNodeServiceArg& operator=(UpdateNodeServiceArg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNodeServiceArg& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNodeServiceArg* internal_default_instance() {
    return reinterpret_cast<const UpdateNodeServiceArg*>(
               &_UpdateNodeServiceArg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UpdateNodeServiceArg& a, UpdateNodeServiceArg& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNodeServiceArg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNodeServiceArg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNodeServiceArg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNodeServiceArg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNodeServiceArg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateNodeServiceArg& from) {
    UpdateNodeServiceArg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNodeServiceArg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rpc.UpdateNodeServiceArg";
  }
  protected:
  explicit UpdateNodeServiceArg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 2,
    kIpFieldNumber = 1,
  };
  // string serviceName = 2;
  void clear_servicename();
  const std::string& servicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_servicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_servicename();
  PROTOBUF_NODISCARD std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // .rpc.Ip ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const ::rpc::Ip& ip() const;
  PROTOBUF_NODISCARD ::rpc::Ip* release_ip();
  ::rpc::Ip* mutable_ip();
  void set_allocated_ip(::rpc::Ip* ip);
  private:
  const ::rpc::Ip& _internal_ip() const;
  ::rpc::Ip* _internal_mutable_ip();
  public:
  void unsafe_arena_set_allocated_ip(
      ::rpc::Ip* ip);
  ::rpc::Ip* unsafe_arena_release_ip();

  // @@protoc_insertion_point(class_scope:rpc.UpdateNodeServiceArg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
    ::rpc::Ip* ip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_updateNodeServiceArg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UpdateNodeServiceArg

// .rpc.Ip ip = 1;
inline bool UpdateNodeServiceArg::_internal_has_ip() const {
  return this != internal_default_instance() && _impl_.ip_ != nullptr;
}
inline bool UpdateNodeServiceArg::has_ip() const {
  return _internal_has_ip();
}
inline const ::rpc::Ip& UpdateNodeServiceArg::_internal_ip() const {
  const ::rpc::Ip* p = _impl_.ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::rpc::Ip&>(
      ::rpc::_Ip_default_instance_);
}
inline const ::rpc::Ip& UpdateNodeServiceArg::ip() const {
  // @@protoc_insertion_point(field_get:rpc.UpdateNodeServiceArg.ip)
  return _internal_ip();
}
inline void UpdateNodeServiceArg::unsafe_arena_set_allocated_ip(
    ::rpc::Ip* ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ip_);
  }
  _impl_.ip_ = ip;
  if (ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rpc.UpdateNodeServiceArg.ip)
}
inline ::rpc::Ip* UpdateNodeServiceArg::release_ip() {
  
  ::rpc::Ip* temp = _impl_.ip_;
  _impl_.ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rpc::Ip* UpdateNodeServiceArg::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_release:rpc.UpdateNodeServiceArg.ip)
  
  ::rpc::Ip* temp = _impl_.ip_;
  _impl_.ip_ = nullptr;
  return temp;
}
inline ::rpc::Ip* UpdateNodeServiceArg::_internal_mutable_ip() {
  
  if (_impl_.ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::rpc::Ip>(GetArenaForAllocation());
    _impl_.ip_ = p;
  }
  return _impl_.ip_;
}
inline ::rpc::Ip* UpdateNodeServiceArg::mutable_ip() {
  ::rpc::Ip* _msg = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:rpc.UpdateNodeServiceArg.ip)
  return _msg;
}
inline void UpdateNodeServiceArg::set_allocated_ip(::rpc::Ip* ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ip_);
  }
  if (ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip));
    if (message_arena != submessage_arena) {
      ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ip_ = ip;
  // @@protoc_insertion_point(field_set_allocated:rpc.UpdateNodeServiceArg.ip)
}

// string serviceName = 2;
inline void UpdateNodeServiceArg::clear_servicename() {
  _impl_.servicename_.ClearToEmpty();
}
inline const std::string& UpdateNodeServiceArg::servicename() const {
  // @@protoc_insertion_point(field_get:rpc.UpdateNodeServiceArg.serviceName)
  return _internal_servicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateNodeServiceArg::set_servicename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.servicename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rpc.UpdateNodeServiceArg.serviceName)
}
inline std::string* UpdateNodeServiceArg::mutable_servicename() {
  std::string* _s = _internal_mutable_servicename();
  // @@protoc_insertion_point(field_mutable:rpc.UpdateNodeServiceArg.serviceName)
  return _s;
}
inline const std::string& UpdateNodeServiceArg::_internal_servicename() const {
  return _impl_.servicename_.Get();
}
inline void UpdateNodeServiceArg::_internal_set_servicename(const std::string& value) {
  
  _impl_.servicename_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateNodeServiceArg::_internal_mutable_servicename() {
  
  return _impl_.servicename_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateNodeServiceArg::release_servicename() {
  // @@protoc_insertion_point(field_release:rpc.UpdateNodeServiceArg.serviceName)
  return _impl_.servicename_.Release();
}
inline void UpdateNodeServiceArg::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  _impl_.servicename_.SetAllocated(servicename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servicename_.IsDefault()) {
    _impl_.servicename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rpc.UpdateNodeServiceArg.serviceName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_updateNodeServiceArg_2eproto
